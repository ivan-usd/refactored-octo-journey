print(i*2)
for (i in 0:5) {
print(i*2)
}
for (i in 0:5) {
print(i*2)
}
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
```{r}
library(tidyverse)
library(tidyverse)
library(tidyverse)
print(i*2)
print(i*2)
for (i in 0:5) {
print(i*2)
}
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
#library(ggplot2)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(tidyverse)
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
View(customerDF)
marriedByIncome:
group_by(health.ins):
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome:
group_by(health.ins):
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome.health.ins
marriedByIncome```
marriedByIncome
marriedByIncome:
group_by('health.ins'):
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by('health.ins') %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
round(marriedByIncome, digits = 2)
round(marriedByIncome, digits = 2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)), round(percent,2)
marriedByIncome %>%
group_by(health.ins), round(percent,2) %>%
marriedByIncome %>%
group_by(health.ins) %>%
summarise(round(percent = 100 * n()/nrow(marriedByIncome),digits =2))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome, digits = 2))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome,round, digits = 2))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome,round(x,2)))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)) %>%
round(percent,2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)),round(percent,3)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)),round(marriedByIncome,3)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)),round(marriedByIncome,2)
round(marriedByIncome,2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)),round(x,digits=2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)).round(x,digits=2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))round(marriedByIncome,digits=2)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
summarise((percent = 100 * n()/nrow(marriedByIncome),digits=2)
summarise((percent = 100 * n()/nrow(marriedByIncome,digits =2))
summarise?((percent = 100 * n()/nrow(marriedByIncome))
summarise?
?summarise
?summarise
marriedByIncome %>%
group_by(health.ins) %>%
summarise(((percent = round(100 * n()/nrow(marriedByIncome)),2)))
summarise(((percent = round(100 * n()/nrow(marriedByIncome)),2))
summarise(((percent = round(100 * n()/nrow(marriedByIncome)),2)
summarise(percent = round(100 * n()/nrow(marriedByIncome),2)
marriedByIncome %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits =2)
marriedByIncome %>%
summarise(percent = 100 * n()/nrow(marriedByIncome)
marriedByIncome %>%
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = 100 * n()/nrow(marriedByIncome))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(round(percent = 100 * n()/nrow(marriedByIncome),digits = 2))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 3))
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
View(customerDF)
View(customerDF)
# Change the point size, and shape
ggplot(mtcars, aes(x=age, y=income)) +
geom_point(size=2, shape=23)
# Change the point size, and shape
ggplot(mtcars, aes(x='age', y='income')) +
geom_point(size=2, shape=23)
# Basic scatter plot
ggplot(customerDF, aes(x=age, y=income)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=income, y=age)) +
geom_point(size=2, shape=23)
# Basic scatter plot
ggplot(customerDF, aes(x=income, y=age)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=income, y=age)) +
geom_point(size=2, shape=23)
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
# Basic scatter plot
ggplot(customerDF, aes(x=income, y=age)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=income, y=age)) +
geom_point(size=2, shape=23)
# Basic scatter plot
ggplot(customerDF, aes(x=income, y=age)) + geom_point()
# Change the point size, and shape
ggplot(mtcars, aes(x=income, y=age)) +
geom_point(size=2, shape=23)
View(customerDF)
droppedNA = customerDF.drop_na()
droppedNA = customerDF %>% drop_na()
View(droppedNA)
View(customerDF)
View(droppedNA)
round(cor(droppedNA),digits = 2)
round(cor(droppedNA$age,droppedNA$income),digits = 2)
round(cor(droppedNA$age,droppedNA$income,droppedNA$num.vehicles),digits = 2)
round(cor(droppedNA[,c("age","income","num.vehicles")]),digits = 2)
View(droppedNA)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, 19 <= age <= 88)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18)
round(cor(subsetByAge %>% drop_na()[,c("age","income","num.vehicles")]),digits = 2)
View(subsetByAge)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18)
#noNullByAge =
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 $ income >= 1000)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 $ income >= 1000)
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 $ income >= 1000)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 $ income >= 1000)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 $ income >=1000)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000)
#noNullByAge =
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
View(subsetByAge)
#droppedNA = customerDF %>% drop_na()
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles) )
#noNullByAge =
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
View(subsetByAge)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
View(datingDF)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF,digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF, use = "complete.obs"),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
# y = ax + b --> x=predictor=Miles, y=response=Games
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(filteredData, aes(x = Miles, y = Games)) +
geom_point() +
stat_smooth()
x<- c(1,2,3,4)
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
dim(datingDF)
# y = ax + b --> x=predictor=Miles, y=response=Games
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_density(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
datingDF[order(datingDF$Miles,-datingDF$Games),]
View(marriedByIncome)
View(marriedByIncome)
marriedByIncome[order(marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
marriedByIncome.dropna[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome = drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
boxplot(Miles~Games,datingDF)
boxplot(Miles,Games,datingDF)
View(customerDF)
boxplot(income~health.ins,customerDF)
colSums(is.na(customerDF))
table(is.na(customerDF))
apply(is.na(customerDF),2,sum)
sapply(customerDF,function(x) sum(is.na(x)))
sapply(customerDF,function(x) sum(is.na(x)))
sort(unique(customerDF$num.vehicles))
bmi <- customerDF$BMI
