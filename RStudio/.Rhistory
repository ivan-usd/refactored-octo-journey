<<<<<<< Updated upstream
load("~/Desktop/Data Science/ads-500b/RStudio/.RData")
plot(cars)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
plot(cars)
plot(cars)
for (i in 0:5) {
print(i*2)
}
customerFP = '/Data/custdata.tsv'
read.table(file = customerFP, sep = '\t',header = TRUE)
customerFP = '/Data/custdata.tsv'
read.table(file = 'custdata.tsv', sep = '\t',header = TRUE)
customerFP = '/Data/custdata.tsv'
read.table(file = 'Data/custdata.tsv', sep = '\t', header = TRUE)
customerFP = 'Data/custdata.tsv'
read.table(file = customerFP, sep = '\t', header = TRUE)
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
View(customerDF)
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
# Basic density
p <- ggplot(customerDF, aes(x=income)) +
geom_density()
p
library(ggplot2)
ggplot(customerDF, aes(x=income)) + geom_density()
library(ggplot2)
ggplot(customerDF, aes(x=income)) + geom_density()
View(customerDF)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
View(subsetHousingType)
View(subsetHousingType)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type), fill=“blue”)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type), fill='blue')
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
View(customerDF)
#newdata <- subset(mydata, sex=="m" & age > 25
marriedByIncome = subset(customerDF, martial.stat == "Married" & income > 50000)
#newdata <- subset(mydata, sex=="m" & age > 25
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
View(p)
View(marriedByIncome)
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
=======
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
```{r}
library(tidyverse)
library(tidyverse)
=======
#ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
# stat_smooth(method = 'lm') + ylim(0,30)
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
#Imports Packages such as; ggplot2,dplyr,tidyr,readr,purrr,tibble,stringr and,forcats
# with a single line call
>>>>>>> Stashed changes
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
View(customerDF)
View(customerDF)
View(subsetHousingType)
View(subsetHousingType)
View(subsetHousingType)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(customerDF) + geom_bar(aes(x=housing.type))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
flights_speed %>%
ggplot(aes(x=reorder(housing.type,count), y=count)) +
geom_boxplot() +
labs(y="Speed", x="Carrier",
subtitle="Sorting Boxplots with missing data")
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
subsetHousingType %>%
ggplot(aes(x=reorder(housing.type,count), y=count)) +
geom_boxplot() +
labs(y="Speed", x="Carrier",
subtitle="Sorting Boxplots with missing data")
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
subsetHousingType %>%
ggplot(aes(x=reorder(housing.type))) +
geom_boxplot() +
labs(y="Speed", x="Carrier",
subtitle="Sorting Boxplots with missing data")
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type,count(housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type,housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
count(subsetHousingType$housing.type)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
unique(subsetHousingType$housing.type)
ggplot(subsetHousingType) + geom_bar(aes(x=reorder(housing.type,housing.type)))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
#ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
tabyl(subsetHousingType$housing.type)
library(janitor)
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
subsetHousingType = subsetHousingType[,sort(subsetHousingType$housing.type)]
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
View(customerDF)
View(customerDF)
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],4, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
<<<<<<< Updated upstream
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(filteredData, aes(x = Miles, y = Games)) +
geom_point() +
stat_smooth()
x<- c(1,2,3,4)
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
dim(datingDF)
# y = ax + b --> x=predictor=Miles, y=response=Games
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_density(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
datingDF[order(datingDF$Miles,-datingDF$Games),]
View(marriedByIncome)
View(marriedByIncome)
marriedByIncome[order(marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
marriedByIncome.dropna[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome = drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
boxplot(Miles~Games,datingDF)
boxplot(Miles,Games,datingDF)
View(customerDF)
boxplot(income~health.ins,customerDF)
colSums(is.na(customerDF))
table(is.na(customerDF))
apply(is.na(customerDF),2,sum)
sapply(customerDF,function(x) sum(is.na(x)))
sapply(customerDF,function(x) sum(is.na(x)))
sort(unique(customerDF$num.vehicles))
bmi <- customerDF$BMI
>>>>>>> 8ed5d37bb71a87cce96d2b4ec4e79a0c77381753
=======
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
>>>>>>> Stashed changes
