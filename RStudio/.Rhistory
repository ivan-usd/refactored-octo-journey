library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
library(tidyverse)
for (i in 0:5) {
print(i*2)
}
customerFP = 'Data/custdata.tsv'
customerDF = read.table(file = customerFP, sep = '\t', header = TRUE)
ggplot(customerDF, aes(x=income)) + geom_density()
subsetHousingType = customerDF[complete.cases(customerDF[ , 7]),]
ggplot(subsetHousingType) + geom_bar(aes(x=housing.type))
marriedByIncome = subset(customerDF, marital.stat == "Married" & income > 50000)
marriedByIncome %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(marriedByIncome),digits = 2))
customerDF %>%
group_by(health.ins) %>%
summarise(percent = round(100 * n()/nrow(customerDF),digits = 2))
subsetByAge = filter(customerDF, age <= 88 & age >= 18 & income >= 1000 & !is.na(num.vehicles))
round(cor(subsetByAge[,c("age","income","num.vehicles")]),digits = 2)
datingFP = 'Data/dating.csv'
datingDF = read.table(file = datingFP, sep = ',', header = TRUE)
round(cor(datingDF[,c("Games","Miles","Icecream")]),digits = 2)
filteredData = filter(datingDF, Games >= 1)
summary(filteredData)
# y = ax + b --> x=predictor=Miles, y=response=Games
<<<<<<< Updated upstream
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(filteredData, aes(x = Miles, y = Games)) +
geom_point() +
stat_smooth()
x<- c(1,2,3,4)
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
x <- 35
y <- 1
while (x<=40) {
y <- y + x%%5
x <- x+1
}
dim(datingDF)
# y = ax + b --> x=predictor=Miles, y=response=Games
regression <- lm(Games~Miles, data = filteredData)
summary(regression)
plot(datingDF[,2],datingDF[,1],col = "blue", main = "Games & MIles Regression",
abline(lm(datingDF[,2]~datingDF[,1])),cex = 1.3 , pch = 16, xlab = "Miles",
ylab = "Games")
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_density(method='lm')
ggplot(datingDF, aes(x=Miles,y=Games)) + geom_point() + stat_smooth(method='lm')
datingDF[order(datingDF$Miles,-datingDF$Games),]
View(marriedByIncome)
View(marriedByIncome)
marriedByIncome[order(marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,-marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$marital.stat,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(-marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
marriedByIncome.dropna[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),4][1]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income)]
drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
marriedByIncome = drop_na(marriedByIncome)
marriedByIncome[order(marriedByIncome$is.employed,-marriedByIncome$income),]
boxplot(Miles~Games,datingDF)
boxplot(Miles,Games,datingDF)
View(customerDF)
boxplot(income~health.ins,customerDF)
colSums(is.na(customerDF))
table(is.na(customerDF))
apply(is.na(customerDF),2,sum)
sapply(customerDF,function(x) sum(is.na(x)))
sapply(customerDF,function(x) sum(is.na(x)))
sort(unique(customerDF$num.vehicles))
bmi <- customerDF$BMI
>>>>>>> 8ed5d37bb71a87cce96d2b4ec4e79a0c77381753
=======
ggplot(filteredData, aes(x=Miles,y=Games)) + geom_point() +
stat_smooth(method = 'lm') + ylim(0,30)
lm(Games~Miles, data = filteredData)
ggplot(filteredData, aes(x=Miles,y=Games, color = Like)) + geom_point()
set.seed(20)
likeCluster = kmeans(filteredData[,1:2],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
>>>>>>> Stashed changes
install.packages(c("dbplyr", "RSQLite"))
install.packages("RODBC")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("RODBC")
library(RODBC)
library(DBI)
install.packages("odbc")
sort(unique(odbcListDrivers()[[1]]))
library(odbc)
library(DBI)
sort(unique(odbcListDrivers()[[1]]))
con <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost",
Database = "auto_ads500b",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "auto_ads500b",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "auto_ads500b",
User = "root",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "auto_ads500b",
User = "root",
Password = "nico0312",
Trusted_Connection = "True")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
install.packages("properties")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
library(odbc)
library(DBI)
library(properties)
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
library(odbc)
library(DBI)
library(properties)
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
sort(unique(odbcListDrivers()[[1]]))
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "ISO-8859-1")
con <- dbConnect(odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
install.packages("config")
library(odbc)
library(DBI)
library(config)
library(odbc)
library(DBI)
library(config)
ad = config::get("autodata")
ad = config::get(file = "../data/module5Data/config.yml")
#read.properties('../data/module5Data/mySQLconfig.properties', fields = NULL, encoding = "UTF-8")
View(ad)
con <- dbConnect(odbc(),
Driver = ad$driver,
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
ad = config::get(file = "../data/module5Data/config.yml")
ad = config::get(file = "../data/module5Data/config.yml")
ad = config::get(file = "../data/module5Data/config.yml")
config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = autodata$driver,
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
ad = config::get(file = "../data/module5Data/config.yml")
ad = config::get(file = "../data/module5Data/config.yml")
ad = config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = autodata$driver,
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = ad$driver,
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["driver"]],
Database = ad[["autodata"]][["driver"]],
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["driver"]],
Database = ad[["autodata"]][["driver"]],
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
ad <- config::get(file = "../data/module5Data/config.yml")
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad$driver,
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = "localhost",
Database = "auto_ads500b",
UID = "root",
Password = "nico0312",
Trusted_Connection = "True")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["server"]],
Database = ad[["autodata"]][["database"]],
UID = ad[["autodata"]][["uid"]],
PWD = ad[["autodata"]][["pwd"]],
Trusted_Connection = "True")
library(odbc)
library(DBI)
library(config)
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["server"]],
Database = ad[["autodata"]][["database"]],
UID = ad[["autodata"]][["uid"]],
PWD = ad[["autodata"]][["pwd"]],
Trusted_Connection = "True")
library(odbc)
library(DBI)
library(config)
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["server"]],
Database = ad[["autodata"]][["database"]],
UID = ad[["autodata"]][["uid"]],
PWD = ad[["autodata"]][["pwd"]],
Trusted_Connection = "True")
library(tidyverse)
library(odbc)
library(config)
library(tidyverse)
library(odbc)
library(config)
ad <- config::get(file = "../data/module5Data/config.yml")
con <- dbConnect(odbc(),
Driver = ad[["autodata"]][["driver"]],
Server = ad[["autodata"]][["server"]],
Database = ad[["autodata"]][["database"]],
UID = ad[["autodata"]][["uid"]],
PWD = ad[["autodata"]][["pwd"]],
Trusted_Connection = "True")
View(autoDF)
ggplot(autoDF, aes(x=weight,y=horsepower, color = mpg)) + geom_point()
autoDF[,4:5]
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(filteredData, aes(x=Miles,y=Games, color =  likeCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(40)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],4, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 20)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
set.seed(20)
mpgCluster = kmeans(autoDF[,4:5],3, nstart = 30)
ggplot(autoDF, aes(x=weight,y=horsepower, color =  mpgCluster$cluster)) + geom_point()
